import os
import time
import threading
import requests
import pandas as pd
import sqlite3
from datetime import datetime, timedelta
import alpaca_trade_api as tradeapi
import websocket
import json
import speedtest

# CONFIG
API_KEY = os.getenv('APCA_API_KEY_ID')
API_SECRET = os.getenv('APCA_API_SECRET_KEY')
ALPACA_URL = 'https://paper-api.alpaca.markets'
TRADIER_TOKEN = os.getenv('TRADIER_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
symbols = ['RUN', 'SERV']
profit_target = 0.001
STOP_LOSS_PERCENT = 0.00075
TRADE_VALUE_PER_TRADE = 5000
LOOP_DELAY = 1.0

# Database
conn = sqlite3.connect('trade_log.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS timothy_trade_logsv4 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    symbol TEXT NOT NULL,
    entry_price REAL,
    exit_price REAL,
    position_size INTEGER,
    side TEXT,
    status TEXT,
    entry_timestamp TEXT,
    exit_timestamp TEXT,
    pressure REAL,
    momentum REAL,
    spread REAL,
    vwap REAL,
    ema_strength REAL,
    sell_reason TEXT,
    pnl REAL,
    market_outlook TEXT,
    market_pct REAL
)
''')
conn.commit()

api = tradeapi.REST(API_KEY, API_SECRET, ALPACA_URL, api_version='v2')

def send_telegram_message(text):
    try:
        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                      json={'chat_id': TELEGRAM_CHAT_ID, 'text': text})
    except Exception as e:
        print(f"Telegram Error: {e}")

def get_latency_message():
    try:
        st = speedtest.Speedtest()
        st.get_best_server()
        ping = round(st.results.ping, 2)
        return f"üì∂ Internet Ping: {ping} ms (Checked at {datetime.utcnow().strftime('%H:%M:%S UTC')})"
    except Exception as e:
        return f"‚ùå Error measuring latency: {e}"

def get_trading_indicators(sym):
    try:
        r = requests.get(
            'https://api.tradier.com/v1/markets/timesales',
            params={'symbol': sym, 'interval': '1min', 'session_filter': 'open'},
            headers={'Authorization': f'Bearer {TRADIER_TOKEN}', 'Accept': 'application/json'}
        )
        r.raise_for_status()
        df = pd.DataFrame(r.json().get('series', {}).get('data', []))
        if len(df) < 6:
            return None

        df['EMA_12'] = df['close'].ewm(span=12, adjust=False).mean()
        df['EMA_26'] = df['close'].ewm(span=26, adjust=False).mean()
        df['MACD'] = df['EMA_12'] - df['EMA_26']
        df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()

        macd_cross = df['MACD'].iloc[-1] > df['Signal'].iloc[-1] and df['MACD'].iloc[-2] <= df['Signal'].iloc[-2]
        strong_candle = df['close'].iloc[-1] > df['close'].iloc[-2]
        volume_spike = df['volume'].iloc[-1] > 1.5 * df['volume'].iloc[-6:-1].mean()

        pressure = (df['close'] * df['volume']).pct_change().iloc[-1]
        quote = get_live_quote(sym)
        spread = quote['ask'] - quote['bid'] if quote else None

        return {
            'macd_cross': macd_cross,
            'strong_candle': strong_candle,
            'volume_spike': volume_spike,
            'pressure': pressure,
            'spread': spread,
            'last': quote['last'],
            'bid': quote['bid'],
            'ask': quote['ask'],
            'volume': quote['volume']
        }
    except Exception as e:
        print(f"Error in get_trading_indicators: {e}")
        return None

def get_live_quote(sym):
    try:
        r = requests.get(
            f'https://api.tradier.com/v1/markets/quotes',
            params={'symbols': sym},
            headers={'Authorization': f'Bearer {TRADIER_TOKEN}', 'Accept': 'application/json'}
        )
        q = r.json()['quotes']['quote']
        q = q[0] if isinstance(q, list) else q
        return {
            'last': float(q['last']),
            'bid': float(q['bid']),
            'ask': float(q['ask']),
            'volume': float(q['volume'])
        }
    except Exception as e:
        print(f"Error getting quote for {sym}: {e}")
        return None

def log_trade(...): pass  # Omitted for space - insert your same logging logic

def place_and_monitor(sym):
    try:
        indicators = get_trading_indicators(sym)
        if not indicators or None in indicators.values():
            print(f"[{sym}] Missing data for trading decision.")
            return

        checks = {
            "MACD Cross": indicators['macd_cross'],
            "Strong Candle": indicators['strong_candle'],
            "Volume Spike": indicators['volume_spike'],
            "Pressure > 1.5": indicators['pressure'] > 1.5,
            "Spread ‚â§ 0.03": indicators['spread'] <= 0.03
        }

        for k, v in checks.items():
            print(f"{k}: {'‚úîÔ∏è' if v else '‚úñÔ∏è'}")

        if not all(checks.values()):
            print(f"[{sym}] Conditions not met.")
            return

        QTY = int(TRADE_VALUE_PER_TRADE / indicators['last'])
        if QTY == 0:
            print(f"[{sym}] Trade size too small.")
            return

        order = api.submit_order(sym, QTY, 'buy', 'market', 'gtc')
        time.sleep(2)
        fill_px = api.get_order(order.id).filled_avg_price
        if not fill_px:
            print(f"[{sym}] Buy failed.")
            return

        print(f"[{sym}] Bought {QTY} @ {fill_px}")
        send_telegram_message(f"BUY {sym}: {QTY} @ {fill_px:.4f}")

        target = fill_px + profit_target
        stop = fill_px * (1 - STOP_LOSS_PERCENT)

        for _ in range(60):
            quote = get_live_quote(sym)
            if not quote:
                break
            if quote['last'] >= target or quote['last'] <= stop:
                break
            time.sleep(1)

        sell = api.submit_order(sym, QTY, 'sell', 'market', 'gtc')
        time.sleep(2)
        sell_px = api.get_order(sell.id).filled_avg_price

        if sell_px:
            send_telegram_message(f"SELL {sym}: {QTY} @ {sell_px:.4f}")
            print(f"[{sym}] Sold {QTY} @ {sell_px}")
    except Exception as e:
        print(f"[{sym}] ERROR: {e}")

if __name__ == "__main__":
    print("üìà Bot launching...")
    send_telegram_message(get_latency_message())
    while True:
        for sym in symbols:
            threading.Thread(target=place_and_monitor, args=(sym,)).start()
        time.sleep(LOOP_DELAY)
