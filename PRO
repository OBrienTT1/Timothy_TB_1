import os
import time
import threading
import requests
import pandas as pd
import sqlite3
import speedtest
from datetime import datetime
import alpaca_trade_api as tradeapi

# CONFIG
API_KEY = os.getenv('APCA_API_KEY_ID')
API_SECRET = os.getenv('APCA_API_SECRET_KEY')
ALPACA_URL = 'https://paper-api.alpaca.markets'
TRADIER_TOKEN = os.getenv('TRADIER_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

symbols = ['SYTA', 'RUN', 'SERV', 'MARA']
profit_target = 0.001
stop_loss_pct = 0.004
TRADE_VALUE_PER_TRADE = 5000
LOOP_DELAY = 1.0
in_trade_flags = {sym: threading.Event() for sym in symbols}

# Alpaca Client
api = tradeapi.REST(API_KEY, API_SECRET, ALPACA_URL)

# SQLite Setup
conn = sqlite3.connect('trade_log.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS timothy_trade_logsv4 (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    symbol TEXT NOT NULL,
    entry_price REAL,
    exit_price REAL,
    position_size INTEGER,
    side TEXT CHECK(side IN ('buy','sell')),
    status TEXT CHECK(status IN ('open','closed','error')),
    entry_timestamp TEXT,
    exit_timestamp TEXT,
    pressure REAL,
    spread REAL,
    macd_hist REAL,
    volume_spike INTEGER,
    sell_reason TEXT,
    pnl REAL
)
""")
conn.commit()

def send_telegram_message(text):
    try:
        s = speedtest.Speedtest()
        ping = s.results.ping
        msg = f"{text}\nð¶ Latency: {ping:.2f} ms"
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={'chat_id': TELEGRAM_CHAT_ID, 'text': msg}
        )
    except Exception as e:
        print(f"Telegram Error: {e}")

def get_tradier_timesales(sym):
    try:
        r = requests.get(
            'https://api.tradier.com/v1/markets/timesales',
            params={'symbol': sym, 'interval': '1min', 'session_filter': 'open'},
            headers={'Authorization': f'Bearer {TRADIER_TOKEN}', 'Accept': 'application/json'}
        )
        r.raise_for_status()
        return pd.DataFrame(r.json().get('series', {}).get('data', []))
    except Exception as e:
        print(f"[{sym}] Error getting timesales: {e}")
        return pd.DataFrame()

def get_indicators(sym):
    df = get_tradier_timesales(sym)
    if df.empty or 'close' not in df or 'volume' not in df:
        return 0.0, 0.0, 0.0, 0.0, False

    df['pressure'] = df['close'] * df['volume']
    pressure = df['pressure'].pct_change().dropna().iloc[-1] if len(df) > 1 else 0.0

    ema_12 = df['close'].ewm(span=12, adjust=False).mean()
    ema_26 = df['close'].ewm(span=26, adjust=False).mean()
    macd_line = ema_12 - ema_26
    signal = macd_line.ewm(span=9, adjust=False).mean()
    macd_hist = macd_line - signal
    macd_val = macd_hist.iloc[-1]

    vol_spike = int(df['volume'].iloc[-1] > 1.5 * df['volume'].iloc[-6:-1].mean()) if len(df) >= 6 else 0
    strong_candle = int(df['close'].iloc[-1] > df['close'].iloc[-2]) if len(df) >= 2 else 0

    return pressure, macd_val, vol_spike, strong_candle, True

def get_quote(sym):
    try:
        r = requests.get(
            f'https://api.tradier.com/v1/markets/quotes',
            params={'symbols': sym},
            headers={'Authorization': f'Bearer {TRADIER_TOKEN}', 'Accept': 'application/json'}
        )
        r.raise_for_status()
        q = r.json()['quotes']['quote']
        q = q if isinstance(q, dict) else q[0]
        return float(q['last']), float(q['bid']), float(q['ask'])
    except Exception as e:
        print(f"[{sym}] Error getting quote: {e}")
        return None, None, None

def log_trade(sym, entry_price, exit_price, qty, pressure, spread, macd_hist, volume_spike, sell_reason):
    pnl = (exit_price - entry_price) * qty
    cursor.execute("""
        INSERT INTO timothy_trade_logsv4 (
            symbol, entry_price, exit_price, position_size, side, status,
            entry_timestamp, exit_timestamp, pressure, spread,
            macd_hist, volume_spike, sell_reason, pnl
        ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
    """, (
        sym, entry_price, exit_price, qty, 'buy', 'closed',
        datetime.utcnow().isoformat(), datetime.utcnow().isoformat(),
        pressure, spread, macd_hist, volume_spike, sell_reason, pnl
    ))
    conn.commit()

def place_and_monitor(sym):
    try:
        in_trade_flags[sym].set()
        last, bid, ask = get_quote(sym)
        if not all([last, bid, ask]) or bid <= 0 or ask <= 0:
            return

        pressure, macd_hist, vol_spike, strong_candle, valid = get_indicators(sym)
        if not valid:
            return
        spread = ask - bid

        conds = {
            "pressure > 0.005": pressure > 0.005,
            "macd_hist > 0": macd_hist > 0,
            "vol_spike": vol_spike,
            "spread â¤ 0.02": spread <= 0.02,
            "candle close strong": strong_candle,
        }

        print(f"[{sym}] Quote: {last:.3f} | Spread: {spread:.3f} | MACD: {macd_hist:.4f} | Pressure: {pressure:.4f} | Vol Spike: {bool(vol_spike)} | Strong Candle: {bool(strong_candle)}")
        print(" | ".join([f"{k} {'â' if v else 'â'}" for k, v in conds.items()]))

        if not all(conds.values()):
            return

        qty = int(TRADE_VALUE_PER_TRADE / last)
        order = api.submit_order(symbol=sym, qty=qty, side='buy', type='market', time_in_force='gtc')
        time.sleep(2)
        order_status = api.get_order(order.id)
        fill_px = float(order_status.filled_avg_price)

        send_telegram_message(f"â BUY {sym} | {qty} @ {fill_px:.3f}")
        print(f"[{sym}] Bought {qty} @ {fill_px:.3f}")

        target = round(fill_px + profit_target, 4)
        stop = round(fill_px * (1 - stop_loss_pct), 4)
        print(f"[{sym}] Monitoring: Target={target} | Stop={stop}")

        start = time.time()
        sell_reason = "Timed Out"
        while time.time() - start < 60:
            current, _, _ = get_quote(sym)
            if not current: continue
            if current >= target:
                sell_reason = "Profit Target Hit"
                break
            if current <= stop:
                sell_reason = "Stop-Loss Hit"
                break
            time.sleep(LOOP_DELAY)

        sell_order = api.submit_order(symbol=sym, qty=qty, side='sell', type='market', time_in_force='gtc')
        time.sleep(2)
        sell_status = api.get_order(sell_order.id)
        sell_px = float(sell_status.filled_avg_price)

        send_telegram_message(f"ð´ SELL {sym} | {qty} @ {sell_px:.3f} ({sell_reason})")
        log_trade(sym, fill_px, sell_px, qty, pressure, spread, macd_hist, vol_spike, sell_reason)

        pnl = (sell_px - fill_px) * qty
        print(f"[{sym}] Trade complete. PnL: ${pnl:.2f} | Reason: {sell_reason}")
    except Exception as e:
        print(f"[{sym}] ERROR during trade: {e}")
    finally:
        in_trade_flags[sym].clear()

def run_trading_bot():
    for sym in symbols:
        if not in_trade_flags[sym].is_set():
            threading.Thread(target=place_and_monitor, args=(sym,)).start()

# MAIN LOOP
if __name__ == '__main__':
    print("ð Timothy Scalping Bot Ready")
    send_telegram_message("ð¢ Scalping Bot Online.")
    try:
        while True:
            run_trading_bot()
            time.sleep(LOOP_DELAY)
    except KeyboardInterrupt:
        print("ð Bot stopped manually.")
        send_telegram_message("ð´ Bot stopped manually.")
    finally:
        conn.close()
